Task 1.1: Route planning in Romania
====================================

You are to solve a route planning problem in Romania. To do so, please
use the file
`graph.py <https://maskor.fh-aachen.de/teaching/material/2023-ST_AI/graph.py>`__
and `utils.py <https://maskor.fh-aachen.de/teaching/material/2023-ST_AI/utils.py>`__.

Implement

* BFS
* DFS
* UCS

For your solution, please provide the path and the costs for travelling from Bucharest to Timisoara.

For your solution, please use the following adjacency matrix:

 .. code-block:: python

		     romania = Graph( ['Or', 'Ne', 'Ze', 'Ia', 'Ar', 'Si', 'Fa', 
		      'Va', 'Ri', 'Ti', 'Lu', 'Pi', 'Ur', 'Hi',
		      'Me', 'Bu', 'Dr', 'Ef', 'Cr', 'Gi'],
		     [
			('Or', 'Ze', 71), ('Or', 'Si', 151), 
			('Ne', 'Ia', 87), ('Ze', 'Ar', 75),
			('Ia', 'Va', 92), ('Ar', 'Si', 140),
			('Ar', 'Ti', 118), ('Si', 'Fa', 99), 
			('Si', 'Ri', 80), ('Fa', 'Bu', 211),
			('Va', 'Ur', 142), ('Ri', 'Pi', 97),
			('Ri', 'Cr', 146), ('Ti', 'Lu', 111),
			('Lu', 'Me', 70), ('Me', 'Dr', 75),
			('Dr', 'Cr', 120), ('Cr', 'Pi', 138),
			('Pi', 'Bu', 101), ('Bu', 'Gi', 90),
			('Bu', 'Ur', 85), ('Ur', 'Hi', 98), 
			('Hi', 'Ef', 86)
		     ] )


.. hint::
  
   #. First implement the class **Queue**, which should provide a **FIFO**, **LIFO** and **PRIO** queue.
   #. Then, implement a data structure **Node**, which is able to store the required search tree information.

===========================================================================================================================================================================================================

Task 1.2: Drawing the Labyrinth
=========================================

Before implementing A*, develop an pygame grid with which you will visualize the algorithm later on. 

Write a Grid and Field class, which will be the basis of your visualization and also of your algorithm. An image of the field can be found in task 1.3. 

.. code:: python


   import pygame
   import math

	# Define some colors
	BLACK = (0, 0, 0)
	WHITE = (255, 255, 255)
	BLUE = (0, 0, 255)
	GREEN = (0, 255, 0)
	RED = (255, 0, 0)

	WIDTH = 22
	HEIGHT = 22
	MARGIN = 3


	# --- 
	# Initialize your classes etc.here
	# ---

	pygame.init()
 
	size = (500, 500)
	screen = pygame.display.set_mode(size)
 
	pygame.display.set_caption("My Game")
 
	done = False
 
	clock = pygame.time.Clock()
 
	while not done:
	for event in pygame.event.get():
	if event.type == pygame.QUIT:
		 done = True
 
	   # --- 
      # The code here ist called once per clock tick
      # Let your algorithm loop here
	# --- 
 
		screen.fill(BLACK)
      
		# ---
		# The screen is empty here
      # Put your 'drawing' code here
		#
		#   RECTANGEL EXAMPLE
		#
      #   The third Parameter defines the rectangles positioning etc: [y-pos,x-pos,width,height]    
      #   pygame.draw.rect(screen,color,[(MARGIN + WIDTH) * y + MARGIN,
      #                        (MARGIN + HEIGHT) * x + MARGIN,WIDTH,HEIGHT])
		# ---

 
      pygame.display.flip()
 
      clock.tick(60)
  
   pygame.quit()
